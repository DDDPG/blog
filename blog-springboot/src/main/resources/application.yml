# 端口号
server:
  port: 8080
spring:
  application:
    name: BlogApplication
  # mysql配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://你的ip:3306/blog?serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true
    username: MYSQL用户名
    password: MYSQL密码
    druid:
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 2000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 600000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      # 在获取连接后，确定是否要进行连接空间时间的检查
      testWhileIdle: true
      # 设置从连接池获取连接时是否检查连接有效性，true检查，false不检查
      testOnBorrow: false
      # 设置从连接池归还连接时是否检查连接有效性，true检查，false不检查
      testOnReturn: false
  # 文件上传限制
  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 100MB
  # redis配置
  redis:
    host: 你的ip
    port: 6379
    password: Redis密码
  # mq配置
  rabbitmq:
    host: 你的ip
    port: 5672
    username: rabbitmq用户名
    password: rabbtimq密码
    listener:
      simple:
        retry:
          enabled: true
          # 最大重试次数
          max-attempts: 3
          # 重试间隔时间
          initial-interval: 3000
  # 邮箱配置
  mail:
    host: smtp.qq.com
    # 用户名
    username: 邮箱用户名
    # 授权码
    password: 邮箱授权码
    default-encoding: UTF-8
# mybatisPlus配置
mybatis-plus:
  # mapper映射地址
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # sql打印
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 开启驼峰命名
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      # 数据库表前缀
      table-prefix: t_
# elasticsearch配置
elasticsearch:
  hostname: 你的ip
  port: 9200
  scheme: http
  connTimeout: 1000
  socketTimeout: 30000
  connectionRequestTimeout: 5000
# 博客链接
blog:
  url: 博客域名或ip

# 文件上传策略 local、oss、cos
upload:
  strategy: local
  local:
    # nginx映射本地文件路径，无域名则为 ip:83
    url: http://你的文件上传子域名/
    # 本地文件存储路径
    path: /usr/local/upload/
  # oss存储
  oss:
    url: http://Bucket域名/
    endpoint: OSS配置endpoint
    bucketName: OSS配置bucketName
    accessKeyId: OSS配置accessKeyId
    accesskeySecret: OSS配置accesskeySecret
  # cos存储
  cos:
    url: https://Bucket域名/
    secretId: COS配置secretId
    secretKey: COS配置secretKey
    region: COS配置region
    bucketName: COS配置bucketName

# 搜索模式 可选 elasticsearch 或 mysql
search:
  mode: elasticsearch
# token配置
token:
  # 自定义标识
  header: Authorization
  # 密钥
  secret: 你的自定义密钥
  # 有效期（默认30分钟）
  expireTime: 30
# 第三方登录
oauth:
  weibo:
    client-id: 微博client-id
    client-secret: 微博client-secret
    grant-type: authorization_code
    redirect-url: 微博回调地址
    access-token-url: https://api.weibo.com/oauth2/access_token
    user-info-url: https://api.weibo.com/2/users/show.json?uid={uid}&access_token={access_token}
  gitee:
    client-id: Gitee的client-id
    client-secret: Gitee的client-secret
    grant_type: authorization_code
    redirect-url: Gitee回调地址
    access-token-url: https://gitee.com/oauth/token
    user-info-url: https://gitee.com/api/v5/user?access_token={access_token}
  github:
    client-id: Github的client-id
    client-secret: Github的client-secret
    redirect-url: Github回调地址
    access-token-url: https://github.com/login/oauth/access_token
    user-info-url: https://api.github.com/user
  qq:
    app-id: QQ APPID
    check-token-url: https://graph.qq.com/oauth2.0/me?access_token={access_token}
    user-info-url: https://graph.qq.com/user/get_user_info?openid={openid}&access_token={access_token}&oauth_consumer_key={oauth_consumer_key}